module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCode {
  count: Int!
}

type AggregateCodeValue {
  count: Int!
}

type AggregateContactDetail {
  count: Int!
}

type AggregateOrgUnit {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Code {
  id: ID!
  name: String
  description: String
  codeValueId(where: CodeValueWhereInput, orderBy: CodeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CodeValue!]
}

type CodeConnection {
  pageInfo: PageInfo!
  edges: [CodeEdge]!
  aggregate: AggregateCode!
}

input CodeCreateInput {
  id: ID
  name: String
  description: String
  codeValueId: CodeValueCreateManyWithoutCodeIdInput
}

input CodeCreateOneWithoutCodeValueIdInput {
  create: CodeCreateWithoutCodeValueIdInput
  connect: CodeWhereUniqueInput
}

input CodeCreateWithoutCodeValueIdInput {
  id: ID
  name: String
  description: String
}

type CodeEdge {
  node: Code!
  cursor: String!
}

enum CodeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type CodePreviousValues {
  id: ID!
  name: String
  description: String
}

type CodeSubscriptionPayload {
  mutation: MutationType!
  node: Code
  updatedFields: [String!]
  previousValues: CodePreviousValues
}

input CodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CodeWhereInput
  AND: [CodeSubscriptionWhereInput!]
  OR: [CodeSubscriptionWhereInput!]
  NOT: [CodeSubscriptionWhereInput!]
}

input CodeUpdateInput {
  name: String
  description: String
  codeValueId: CodeValueUpdateManyWithoutCodeIdInput
}

input CodeUpdateManyMutationInput {
  name: String
  description: String
}

input CodeUpdateOneRequiredWithoutCodeValueIdInput {
  create: CodeCreateWithoutCodeValueIdInput
  update: CodeUpdateWithoutCodeValueIdDataInput
  upsert: CodeUpsertWithoutCodeValueIdInput
  connect: CodeWhereUniqueInput
}

input CodeUpdateWithoutCodeValueIdDataInput {
  name: String
  description: String
}

input CodeUpsertWithoutCodeValueIdInput {
  update: CodeUpdateWithoutCodeValueIdDataInput!
  create: CodeCreateWithoutCodeValueIdInput!
}

type CodeValue {
  id: ID!
  name: String
  description: String
  sequenceOrder: Int
  codeId: Code!
}

type CodeValueConnection {
  pageInfo: PageInfo!
  edges: [CodeValueEdge]!
  aggregate: AggregateCodeValue!
}

input CodeValueCreateInput {
  id: ID
  name: String
  description: String
  sequenceOrder: Int
  codeId: CodeCreateOneWithoutCodeValueIdInput!
}

input CodeValueCreateManyWithoutCodeIdInput {
  create: [CodeValueCreateWithoutCodeIdInput!]
  connect: [CodeValueWhereUniqueInput!]
}

input CodeValueCreateOneInput {
  create: CodeValueCreateInput
  connect: CodeValueWhereUniqueInput
}

input CodeValueCreateWithoutCodeIdInput {
  id: ID
  name: String
  description: String
  sequenceOrder: Int
}

type CodeValueEdge {
  node: CodeValue!
  cursor: String!
}

enum CodeValueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  sequenceOrder_ASC
  sequenceOrder_DESC
}

type CodeValuePreviousValues {
  id: ID!
  name: String
  description: String
  sequenceOrder: Int
}

input CodeValueScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  sequenceOrder: Int
  sequenceOrder_not: Int
  sequenceOrder_in: [Int!]
  sequenceOrder_not_in: [Int!]
  sequenceOrder_lt: Int
  sequenceOrder_lte: Int
  sequenceOrder_gt: Int
  sequenceOrder_gte: Int
  AND: [CodeValueScalarWhereInput!]
  OR: [CodeValueScalarWhereInput!]
  NOT: [CodeValueScalarWhereInput!]
}

type CodeValueSubscriptionPayload {
  mutation: MutationType!
  node: CodeValue
  updatedFields: [String!]
  previousValues: CodeValuePreviousValues
}

input CodeValueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CodeValueWhereInput
  AND: [CodeValueSubscriptionWhereInput!]
  OR: [CodeValueSubscriptionWhereInput!]
  NOT: [CodeValueSubscriptionWhereInput!]
}

input CodeValueUpdateDataInput {
  name: String
  description: String
  sequenceOrder: Int
  codeId: CodeUpdateOneRequiredWithoutCodeValueIdInput
}

input CodeValueUpdateInput {
  name: String
  description: String
  sequenceOrder: Int
  codeId: CodeUpdateOneRequiredWithoutCodeValueIdInput
}

input CodeValueUpdateManyDataInput {
  name: String
  description: String
  sequenceOrder: Int
}

input CodeValueUpdateManyMutationInput {
  name: String
  description: String
  sequenceOrder: Int
}

input CodeValueUpdateManyWithoutCodeIdInput {
  create: [CodeValueCreateWithoutCodeIdInput!]
  delete: [CodeValueWhereUniqueInput!]
  connect: [CodeValueWhereUniqueInput!]
  set: [CodeValueWhereUniqueInput!]
  disconnect: [CodeValueWhereUniqueInput!]
  update: [CodeValueUpdateWithWhereUniqueWithoutCodeIdInput!]
  upsert: [CodeValueUpsertWithWhereUniqueWithoutCodeIdInput!]
  deleteMany: [CodeValueScalarWhereInput!]
  updateMany: [CodeValueUpdateManyWithWhereNestedInput!]
}

input CodeValueUpdateManyWithWhereNestedInput {
  where: CodeValueScalarWhereInput!
  data: CodeValueUpdateManyDataInput!
}

input CodeValueUpdateOneRequiredInput {
  create: CodeValueCreateInput
  update: CodeValueUpdateDataInput
  upsert: CodeValueUpsertNestedInput
  connect: CodeValueWhereUniqueInput
}

input CodeValueUpdateWithoutCodeIdDataInput {
  name: String
  description: String
  sequenceOrder: Int
}

input CodeValueUpdateWithWhereUniqueWithoutCodeIdInput {
  where: CodeValueWhereUniqueInput!
  data: CodeValueUpdateWithoutCodeIdDataInput!
}

input CodeValueUpsertNestedInput {
  update: CodeValueUpdateDataInput!
  create: CodeValueCreateInput!
}

input CodeValueUpsertWithWhereUniqueWithoutCodeIdInput {
  where: CodeValueWhereUniqueInput!
  update: CodeValueUpdateWithoutCodeIdDataInput!
  create: CodeValueCreateWithoutCodeIdInput!
}

input CodeValueWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  sequenceOrder: Int
  sequenceOrder_not: Int
  sequenceOrder_in: [Int!]
  sequenceOrder_not_in: [Int!]
  sequenceOrder_lt: Int
  sequenceOrder_lte: Int
  sequenceOrder_gt: Int
  sequenceOrder_gte: Int
  codeId: CodeWhereInput
  AND: [CodeValueWhereInput!]
  OR: [CodeValueWhereInput!]
  NOT: [CodeValueWhereInput!]
}

input CodeValueWhereUniqueInput {
  id: ID
}

input CodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  codeValueId_every: CodeValueWhereInput
  codeValueId_some: CodeValueWhereInput
  codeValueId_none: CodeValueWhereInput
  AND: [CodeWhereInput!]
  OR: [CodeWhereInput!]
  NOT: [CodeWhereInput!]
}

input CodeWhereUniqueInput {
  id: ID
  name: String
}

type ContactDetail {
  id: ID!
  user: User!
  detailTypeId: CodeValue!
  value: String!
}

type ContactDetailConnection {
  pageInfo: PageInfo!
  edges: [ContactDetailEdge]!
  aggregate: AggregateContactDetail!
}

input ContactDetailCreateInput {
  id: ID
  user: UserCreateOneWithoutContactIdInput!
  detailTypeId: CodeValueCreateOneInput!
  value: String!
}

input ContactDetailCreateManyWithoutUserInput {
  create: [ContactDetailCreateWithoutUserInput!]
  connect: [ContactDetailWhereUniqueInput!]
}

input ContactDetailCreateWithoutUserInput {
  id: ID
  detailTypeId: CodeValueCreateOneInput!
  value: String!
}

type ContactDetailEdge {
  node: ContactDetail!
  cursor: String!
}

enum ContactDetailOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
}

type ContactDetailPreviousValues {
  id: ID!
  value: String!
}

input ContactDetailScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ContactDetailScalarWhereInput!]
  OR: [ContactDetailScalarWhereInput!]
  NOT: [ContactDetailScalarWhereInput!]
}

type ContactDetailSubscriptionPayload {
  mutation: MutationType!
  node: ContactDetail
  updatedFields: [String!]
  previousValues: ContactDetailPreviousValues
}

input ContactDetailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactDetailWhereInput
  AND: [ContactDetailSubscriptionWhereInput!]
  OR: [ContactDetailSubscriptionWhereInput!]
  NOT: [ContactDetailSubscriptionWhereInput!]
}

input ContactDetailUpdateInput {
  user: UserUpdateOneRequiredWithoutContactIdInput
  detailTypeId: CodeValueUpdateOneRequiredInput
  value: String
}

input ContactDetailUpdateManyDataInput {
  value: String
}

input ContactDetailUpdateManyMutationInput {
  value: String
}

input ContactDetailUpdateManyWithoutUserInput {
  create: [ContactDetailCreateWithoutUserInput!]
  delete: [ContactDetailWhereUniqueInput!]
  connect: [ContactDetailWhereUniqueInput!]
  set: [ContactDetailWhereUniqueInput!]
  disconnect: [ContactDetailWhereUniqueInput!]
  update: [ContactDetailUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ContactDetailUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ContactDetailScalarWhereInput!]
  updateMany: [ContactDetailUpdateManyWithWhereNestedInput!]
}

input ContactDetailUpdateManyWithWhereNestedInput {
  where: ContactDetailScalarWhereInput!
  data: ContactDetailUpdateManyDataInput!
}

input ContactDetailUpdateWithoutUserDataInput {
  detailTypeId: CodeValueUpdateOneRequiredInput
  value: String
}

input ContactDetailUpdateWithWhereUniqueWithoutUserInput {
  where: ContactDetailWhereUniqueInput!
  data: ContactDetailUpdateWithoutUserDataInput!
}

input ContactDetailUpsertWithWhereUniqueWithoutUserInput {
  where: ContactDetailWhereUniqueInput!
  update: ContactDetailUpdateWithoutUserDataInput!
  create: ContactDetailCreateWithoutUserInput!
}

input ContactDetailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  detailTypeId: CodeValueWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ContactDetailWhereInput!]
  OR: [ContactDetailWhereInput!]
  NOT: [ContactDetailWhereInput!]
}

input ContactDetailWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCode(data: CodeCreateInput!): Code!
  updateCode(data: CodeUpdateInput!, where: CodeWhereUniqueInput!): Code
  updateManyCodes(data: CodeUpdateManyMutationInput!, where: CodeWhereInput): BatchPayload!
  upsertCode(where: CodeWhereUniqueInput!, create: CodeCreateInput!, update: CodeUpdateInput!): Code!
  deleteCode(where: CodeWhereUniqueInput!): Code
  deleteManyCodes(where: CodeWhereInput): BatchPayload!
  createCodeValue(data: CodeValueCreateInput!): CodeValue!
  updateCodeValue(data: CodeValueUpdateInput!, where: CodeValueWhereUniqueInput!): CodeValue
  updateManyCodeValues(data: CodeValueUpdateManyMutationInput!, where: CodeValueWhereInput): BatchPayload!
  upsertCodeValue(where: CodeValueWhereUniqueInput!, create: CodeValueCreateInput!, update: CodeValueUpdateInput!): CodeValue!
  deleteCodeValue(where: CodeValueWhereUniqueInput!): CodeValue
  deleteManyCodeValues(where: CodeValueWhereInput): BatchPayload!
  createContactDetail(data: ContactDetailCreateInput!): ContactDetail!
  updateContactDetail(data: ContactDetailUpdateInput!, where: ContactDetailWhereUniqueInput!): ContactDetail
  updateManyContactDetails(data: ContactDetailUpdateManyMutationInput!, where: ContactDetailWhereInput): BatchPayload!
  upsertContactDetail(where: ContactDetailWhereUniqueInput!, create: ContactDetailCreateInput!, update: ContactDetailUpdateInput!): ContactDetail!
  deleteContactDetail(where: ContactDetailWhereUniqueInput!): ContactDetail
  deleteManyContactDetails(where: ContactDetailWhereInput): BatchPayload!
  createOrgUnit(data: OrgUnitCreateInput!): OrgUnit!
  updateOrgUnit(data: OrgUnitUpdateInput!, where: OrgUnitWhereUniqueInput!): OrgUnit
  updateManyOrgUnits(data: OrgUnitUpdateManyMutationInput!, where: OrgUnitWhereInput): BatchPayload!
  upsertOrgUnit(where: OrgUnitWhereUniqueInput!, create: OrgUnitCreateInput!, update: OrgUnitUpdateInput!): OrgUnit!
  deleteOrgUnit(where: OrgUnitWhereUniqueInput!): OrgUnit
  deleteManyOrgUnits(where: OrgUnitWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type OrgUnit {
  id: ID!
  registeredName: String!
  displayName: String!
  address: String!
}

type OrgUnitConnection {
  pageInfo: PageInfo!
  edges: [OrgUnitEdge]!
  aggregate: AggregateOrgUnit!
}

input OrgUnitCreateInput {
  id: ID
  registeredName: String!
  displayName: String!
  address: String!
}

input OrgUnitCreateOneInput {
  create: OrgUnitCreateInput
  connect: OrgUnitWhereUniqueInput
}

type OrgUnitEdge {
  node: OrgUnit!
  cursor: String!
}

enum OrgUnitOrderByInput {
  id_ASC
  id_DESC
  registeredName_ASC
  registeredName_DESC
  displayName_ASC
  displayName_DESC
  address_ASC
  address_DESC
}

type OrgUnitPreviousValues {
  id: ID!
  registeredName: String!
  displayName: String!
  address: String!
}

type OrgUnitSubscriptionPayload {
  mutation: MutationType!
  node: OrgUnit
  updatedFields: [String!]
  previousValues: OrgUnitPreviousValues
}

input OrgUnitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrgUnitWhereInput
  AND: [OrgUnitSubscriptionWhereInput!]
  OR: [OrgUnitSubscriptionWhereInput!]
  NOT: [OrgUnitSubscriptionWhereInput!]
}

input OrgUnitUpdateDataInput {
  registeredName: String
  displayName: String
  address: String
}

input OrgUnitUpdateInput {
  registeredName: String
  displayName: String
  address: String
}

input OrgUnitUpdateManyMutationInput {
  registeredName: String
  displayName: String
  address: String
}

input OrgUnitUpdateOneRequiredInput {
  create: OrgUnitCreateInput
  update: OrgUnitUpdateDataInput
  upsert: OrgUnitUpsertNestedInput
  connect: OrgUnitWhereUniqueInput
}

input OrgUnitUpsertNestedInput {
  update: OrgUnitUpdateDataInput!
  create: OrgUnitCreateInput!
}

input OrgUnitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  registeredName: String
  registeredName_not: String
  registeredName_in: [String!]
  registeredName_not_in: [String!]
  registeredName_lt: String
  registeredName_lte: String
  registeredName_gt: String
  registeredName_gte: String
  registeredName_contains: String
  registeredName_not_contains: String
  registeredName_starts_with: String
  registeredName_not_starts_with: String
  registeredName_ends_with: String
  registeredName_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  AND: [OrgUnitWhereInput!]
  OR: [OrgUnitWhereInput!]
  NOT: [OrgUnitWhereInput!]
}

input OrgUnitWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  published: Boolean!
  title: String!
  content: String!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  published: Boolean
  title: String!
  content: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type PostPreviousValues {
  id: ID!
  published: Boolean!
  title: String!
  content: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  published: Boolean
  title: String
  content: String
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  code(where: CodeWhereUniqueInput!): Code
  codes(where: CodeWhereInput, orderBy: CodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Code]!
  codesConnection(where: CodeWhereInput, orderBy: CodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CodeConnection!
  codeValue(where: CodeValueWhereUniqueInput!): CodeValue
  codeValues(where: CodeValueWhereInput, orderBy: CodeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CodeValue]!
  codeValuesConnection(where: CodeValueWhereInput, orderBy: CodeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CodeValueConnection!
  contactDetail(where: ContactDetailWhereUniqueInput!): ContactDetail
  contactDetails(where: ContactDetailWhereInput, orderBy: ContactDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactDetail]!
  contactDetailsConnection(where: ContactDetailWhereInput, orderBy: ContactDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactDetailConnection!
  orgUnit(where: OrgUnitWhereUniqueInput!): OrgUnit
  orgUnits(where: OrgUnitWhereInput, orderBy: OrgUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrgUnit]!
  orgUnitsConnection(where: OrgUnitWhereInput, orderBy: OrgUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrgUnitConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  code(where: CodeSubscriptionWhereInput): CodeSubscriptionPayload
  codeValue(where: CodeValueSubscriptionWhereInput): CodeValueSubscriptionPayload
  contactDetail(where: ContactDetailSubscriptionWhereInput): ContactDetailSubscriptionPayload
  orgUnit(where: OrgUnitSubscriptionWhereInput): OrgUnitSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  orgUnitId: OrgUnit!
  contactId(where: ContactDetailWhereInput, orderBy: ContactDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactDetail!]
  isOrgUnitPrimaryContact: Boolean
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  orgUnitId: OrgUnitCreateOneInput!
  contactId: ContactDetailCreateManyWithoutUserInput
  isOrgUnitPrimaryContact: Boolean
}

input UserCreateOneWithoutContactIdInput {
  create: UserCreateWithoutContactIdInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutContactIdInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  orgUnitId: OrgUnitCreateOneInput!
  isOrgUnitPrimaryContact: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  isOrgUnitPrimaryContact_ASC
  isOrgUnitPrimaryContact_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  isOrgUnitPrimaryContact: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  orgUnitId: OrgUnitUpdateOneRequiredInput
  contactId: ContactDetailUpdateManyWithoutUserInput
  isOrgUnitPrimaryContact: Boolean
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  password: String
  isOrgUnitPrimaryContact: Boolean
}

input UserUpdateOneRequiredWithoutContactIdInput {
  create: UserCreateWithoutContactIdInput
  update: UserUpdateWithoutContactIdDataInput
  upsert: UserUpsertWithoutContactIdInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutContactIdDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  orgUnitId: OrgUnitUpdateOneRequiredInput
  isOrgUnitPrimaryContact: Boolean
}

input UserUpsertWithoutContactIdInput {
  update: UserUpdateWithoutContactIdDataInput!
  create: UserCreateWithoutContactIdInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  orgUnitId: OrgUnitWhereInput
  contactId_every: ContactDetailWhereInput
  contactId_some: ContactDetailWhereInput
  contactId_none: ContactDetailWhereInput
  isOrgUnitPrimaryContact: Boolean
  isOrgUnitPrimaryContact_not: Boolean
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    