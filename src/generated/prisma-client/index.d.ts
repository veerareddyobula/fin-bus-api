// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  code: (where?: CodeWhereInput) => Promise<boolean>;
  codeValue: (where?: CodeValueWhereInput) => Promise<boolean>;
  contactDetail: (where?: ContactDetailWhereInput) => Promise<boolean>;
  orgUnit: (where?: OrgUnitWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  code: (where: CodeWhereUniqueInput) => CodeNullablePromise;
  codes: (args?: {
    where?: CodeWhereInput;
    orderBy?: CodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Code>;
  codesConnection: (args?: {
    where?: CodeWhereInput;
    orderBy?: CodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CodeConnectionPromise;
  codeValue: (where: CodeValueWhereUniqueInput) => CodeValueNullablePromise;
  codeValues: (args?: {
    where?: CodeValueWhereInput;
    orderBy?: CodeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CodeValue>;
  codeValuesConnection: (args?: {
    where?: CodeValueWhereInput;
    orderBy?: CodeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CodeValueConnectionPromise;
  contactDetail: (
    where: ContactDetailWhereUniqueInput
  ) => ContactDetailNullablePromise;
  contactDetails: (args?: {
    where?: ContactDetailWhereInput;
    orderBy?: ContactDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ContactDetail>;
  contactDetailsConnection: (args?: {
    where?: ContactDetailWhereInput;
    orderBy?: ContactDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContactDetailConnectionPromise;
  orgUnit: (where: OrgUnitWhereUniqueInput) => OrgUnitNullablePromise;
  orgUnits: (args?: {
    where?: OrgUnitWhereInput;
    orderBy?: OrgUnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrgUnit>;
  orgUnitsConnection: (args?: {
    where?: OrgUnitWhereInput;
    orderBy?: OrgUnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrgUnitConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCode: (data: CodeCreateInput) => CodePromise;
  updateCode: (args: {
    data: CodeUpdateInput;
    where: CodeWhereUniqueInput;
  }) => CodePromise;
  updateManyCodes: (args: {
    data: CodeUpdateManyMutationInput;
    where?: CodeWhereInput;
  }) => BatchPayloadPromise;
  upsertCode: (args: {
    where: CodeWhereUniqueInput;
    create: CodeCreateInput;
    update: CodeUpdateInput;
  }) => CodePromise;
  deleteCode: (where: CodeWhereUniqueInput) => CodePromise;
  deleteManyCodes: (where?: CodeWhereInput) => BatchPayloadPromise;
  createCodeValue: (data: CodeValueCreateInput) => CodeValuePromise;
  updateCodeValue: (args: {
    data: CodeValueUpdateInput;
    where: CodeValueWhereUniqueInput;
  }) => CodeValuePromise;
  updateManyCodeValues: (args: {
    data: CodeValueUpdateManyMutationInput;
    where?: CodeValueWhereInput;
  }) => BatchPayloadPromise;
  upsertCodeValue: (args: {
    where: CodeValueWhereUniqueInput;
    create: CodeValueCreateInput;
    update: CodeValueUpdateInput;
  }) => CodeValuePromise;
  deleteCodeValue: (where: CodeValueWhereUniqueInput) => CodeValuePromise;
  deleteManyCodeValues: (where?: CodeValueWhereInput) => BatchPayloadPromise;
  createContactDetail: (data: ContactDetailCreateInput) => ContactDetailPromise;
  updateContactDetail: (args: {
    data: ContactDetailUpdateInput;
    where: ContactDetailWhereUniqueInput;
  }) => ContactDetailPromise;
  updateManyContactDetails: (args: {
    data: ContactDetailUpdateManyMutationInput;
    where?: ContactDetailWhereInput;
  }) => BatchPayloadPromise;
  upsertContactDetail: (args: {
    where: ContactDetailWhereUniqueInput;
    create: ContactDetailCreateInput;
    update: ContactDetailUpdateInput;
  }) => ContactDetailPromise;
  deleteContactDetail: (
    where: ContactDetailWhereUniqueInput
  ) => ContactDetailPromise;
  deleteManyContactDetails: (
    where?: ContactDetailWhereInput
  ) => BatchPayloadPromise;
  createOrgUnit: (data: OrgUnitCreateInput) => OrgUnitPromise;
  updateOrgUnit: (args: {
    data: OrgUnitUpdateInput;
    where: OrgUnitWhereUniqueInput;
  }) => OrgUnitPromise;
  updateManyOrgUnits: (args: {
    data: OrgUnitUpdateManyMutationInput;
    where?: OrgUnitWhereInput;
  }) => BatchPayloadPromise;
  upsertOrgUnit: (args: {
    where: OrgUnitWhereUniqueInput;
    create: OrgUnitCreateInput;
    update: OrgUnitUpdateInput;
  }) => OrgUnitPromise;
  deleteOrgUnit: (where: OrgUnitWhereUniqueInput) => OrgUnitPromise;
  deleteManyOrgUnits: (where?: OrgUnitWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  code: (
    where?: CodeSubscriptionWhereInput
  ) => CodeSubscriptionPayloadSubscription;
  codeValue: (
    where?: CodeValueSubscriptionWhereInput
  ) => CodeValueSubscriptionPayloadSubscription;
  contactDetail: (
    where?: ContactDetailSubscriptionWhereInput
  ) => ContactDetailSubscriptionPayloadSubscription;
  orgUnit: (
    where?: OrgUnitSubscriptionWhereInput
  ) => OrgUnitSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CodeValueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "sequenceOrder_ASC"
  | "sequenceOrder_DESC";

export type ContactDetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC";

export type OrgUnitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "registeredName_ASC"
  | "registeredName_DESC"
  | "displayName_ASC"
  | "displayName_DESC"
  | "address_ASC"
  | "address_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "isOrgUnitPrimaryContact_ASC"
  | "isOrgUnitPrimaryContact_DESC";

export interface ContactDetailUpdateManyMutationInput {
  value?: Maybe<String>;
}

export interface OrgUnitUpdateDataInput {
  registeredName?: Maybe<String>;
  displayName?: Maybe<String>;
  address?: Maybe<String>;
}

export interface CodeValueUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  sequenceOrder?: Maybe<Int>;
  codeId?: Maybe<CodeUpdateOneRequiredWithoutCodeValueIdInput>;
}

export type CodeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface CodeValueUpdateOneRequiredInput {
  create?: Maybe<CodeValueCreateInput>;
  update?: Maybe<CodeValueUpdateDataInput>;
  upsert?: Maybe<CodeValueUpsertNestedInput>;
  connect?: Maybe<CodeValueWhereUniqueInput>;
}

export interface CodeValueSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CodeValueWhereInput>;
  AND?: Maybe<
    CodeValueSubscriptionWhereInput[] | CodeValueSubscriptionWhereInput
  >;
  OR?: Maybe<
    CodeValueSubscriptionWhereInput[] | CodeValueSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CodeValueSubscriptionWhereInput[] | CodeValueSubscriptionWhereInput
  >;
}

export interface CodeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CodeWhereInput>;
  AND?: Maybe<CodeSubscriptionWhereInput[] | CodeSubscriptionWhereInput>;
  OR?: Maybe<CodeSubscriptionWhereInput[] | CodeSubscriptionWhereInput>;
  NOT?: Maybe<CodeSubscriptionWhereInput[] | CodeSubscriptionWhereInput>;
}

export interface ContactDetailUpdateManyDataInput {
  value?: Maybe<String>;
}

export interface CodeCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  codeValueId?: Maybe<CodeValueCreateManyWithoutCodeIdInput>;
}

export interface ContactDetailUpdateManyWithWhereNestedInput {
  where: ContactDetailScalarWhereInput;
  data: ContactDetailUpdateManyDataInput;
}

export interface CodeValueCreateManyWithoutCodeIdInput {
  create?: Maybe<
    CodeValueCreateWithoutCodeIdInput[] | CodeValueCreateWithoutCodeIdInput
  >;
  connect?: Maybe<CodeValueWhereUniqueInput[] | CodeValueWhereUniqueInput>;
}

export interface ContactDetailUpsertWithWhereUniqueWithoutUserInput {
  where: ContactDetailWhereUniqueInput;
  update: ContactDetailUpdateWithoutUserDataInput;
  create: ContactDetailCreateWithoutUserInput;
}

export interface CodeValueCreateWithoutCodeIdInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  sequenceOrder?: Maybe<Int>;
}

export interface ContactDetailUpdateWithoutUserDataInput {
  detailTypeId?: Maybe<CodeValueUpdateOneRequiredInput>;
  value?: Maybe<String>;
}

export interface CodeUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  codeValueId?: Maybe<CodeValueUpdateManyWithoutCodeIdInput>;
}

export interface ContactDetailUpdateManyWithoutUserInput {
  create?: Maybe<
    ContactDetailCreateWithoutUserInput[] | ContactDetailCreateWithoutUserInput
  >;
  delete?: Maybe<
    ContactDetailWhereUniqueInput[] | ContactDetailWhereUniqueInput
  >;
  connect?: Maybe<
    ContactDetailWhereUniqueInput[] | ContactDetailWhereUniqueInput
  >;
  set?: Maybe<ContactDetailWhereUniqueInput[] | ContactDetailWhereUniqueInput>;
  disconnect?: Maybe<
    ContactDetailWhereUniqueInput[] | ContactDetailWhereUniqueInput
  >;
  update?: Maybe<
    | ContactDetailUpdateWithWhereUniqueWithoutUserInput[]
    | ContactDetailUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ContactDetailUpsertWithWhereUniqueWithoutUserInput[]
    | ContactDetailUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ContactDetailScalarWhereInput[] | ContactDetailScalarWhereInput
  >;
  updateMany?: Maybe<
    | ContactDetailUpdateManyWithWhereNestedInput[]
    | ContactDetailUpdateManyWithWhereNestedInput
  >;
}

export interface CodeValueUpdateManyWithoutCodeIdInput {
  create?: Maybe<
    CodeValueCreateWithoutCodeIdInput[] | CodeValueCreateWithoutCodeIdInput
  >;
  delete?: Maybe<CodeValueWhereUniqueInput[] | CodeValueWhereUniqueInput>;
  connect?: Maybe<CodeValueWhereUniqueInput[] | CodeValueWhereUniqueInput>;
  set?: Maybe<CodeValueWhereUniqueInput[] | CodeValueWhereUniqueInput>;
  disconnect?: Maybe<CodeValueWhereUniqueInput[] | CodeValueWhereUniqueInput>;
  update?: Maybe<
    | CodeValueUpdateWithWhereUniqueWithoutCodeIdInput[]
    | CodeValueUpdateWithWhereUniqueWithoutCodeIdInput
  >;
  upsert?: Maybe<
    | CodeValueUpsertWithWhereUniqueWithoutCodeIdInput[]
    | CodeValueUpsertWithWhereUniqueWithoutCodeIdInput
  >;
  deleteMany?: Maybe<CodeValueScalarWhereInput[] | CodeValueScalarWhereInput>;
  updateMany?: Maybe<
    | CodeValueUpdateManyWithWhereNestedInput[]
    | CodeValueUpdateManyWithWhereNestedInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  orgUnitId?: Maybe<OrgUnitWhereInput>;
  contactId_every?: Maybe<ContactDetailWhereInput>;
  contactId_some?: Maybe<ContactDetailWhereInput>;
  contactId_none?: Maybe<ContactDetailWhereInput>;
  isOrgUnitPrimaryContact?: Maybe<Boolean>;
  isOrgUnitPrimaryContact_not?: Maybe<Boolean>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CodeValueUpdateWithWhereUniqueWithoutCodeIdInput {
  where: CodeValueWhereUniqueInput;
  data: CodeValueUpdateWithoutCodeIdDataInput;
}

export interface CodeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  codeValueId_every?: Maybe<CodeValueWhereInput>;
  codeValueId_some?: Maybe<CodeValueWhereInput>;
  codeValueId_none?: Maybe<CodeValueWhereInput>;
  AND?: Maybe<CodeWhereInput[] | CodeWhereInput>;
  OR?: Maybe<CodeWhereInput[] | CodeWhereInput>;
  NOT?: Maybe<CodeWhereInput[] | CodeWhereInput>;
}

export interface CodeValueUpdateWithoutCodeIdDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  sequenceOrder?: Maybe<Int>;
}

export interface ContactDetailCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  detailTypeId: CodeValueCreateOneInput;
  value: String;
}

export interface CodeValueUpsertWithWhereUniqueWithoutCodeIdInput {
  where: CodeValueWhereUniqueInput;
  update: CodeValueUpdateWithoutCodeIdDataInput;
  create: CodeValueCreateWithoutCodeIdInput;
}

export type OrgUnitWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CodeValueScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  sequenceOrder?: Maybe<Int>;
  sequenceOrder_not?: Maybe<Int>;
  sequenceOrder_in?: Maybe<Int[] | Int>;
  sequenceOrder_not_in?: Maybe<Int[] | Int>;
  sequenceOrder_lt?: Maybe<Int>;
  sequenceOrder_lte?: Maybe<Int>;
  sequenceOrder_gt?: Maybe<Int>;
  sequenceOrder_gte?: Maybe<Int>;
  AND?: Maybe<CodeValueScalarWhereInput[] | CodeValueScalarWhereInput>;
  OR?: Maybe<CodeValueScalarWhereInput[] | CodeValueScalarWhereInput>;
  NOT?: Maybe<CodeValueScalarWhereInput[] | CodeValueScalarWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  orgUnitId: OrgUnitCreateOneInput;
  contactId?: Maybe<ContactDetailCreateManyWithoutUserInput>;
  isOrgUnitPrimaryContact?: Maybe<Boolean>;
}

export interface CodeValueUpdateManyWithWhereNestedInput {
  where: CodeValueScalarWhereInput;
  data: CodeValueUpdateManyDataInput;
}

export interface PostUpdateInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface CodeValueUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  sequenceOrder?: Maybe<Int>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  content: String;
}

export interface CodeUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface CodeValueWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  sequenceOrder?: Maybe<Int>;
  sequenceOrder_not?: Maybe<Int>;
  sequenceOrder_in?: Maybe<Int[] | Int>;
  sequenceOrder_not_in?: Maybe<Int[] | Int>;
  sequenceOrder_lt?: Maybe<Int>;
  sequenceOrder_lte?: Maybe<Int>;
  sequenceOrder_gt?: Maybe<Int>;
  sequenceOrder_gte?: Maybe<Int>;
  codeId?: Maybe<CodeWhereInput>;
  AND?: Maybe<CodeValueWhereInput[] | CodeValueWhereInput>;
  OR?: Maybe<CodeValueWhereInput[] | CodeValueWhereInput>;
  NOT?: Maybe<CodeValueWhereInput[] | CodeValueWhereInput>;
}

export interface UserUpsertWithoutContactIdInput {
  update: UserUpdateWithoutContactIdDataInput;
  create: UserCreateWithoutContactIdInput;
}

export interface OrgUnitUpdateInput {
  registeredName?: Maybe<String>;
  displayName?: Maybe<String>;
  address?: Maybe<String>;
}

export interface OrgUnitUpsertNestedInput {
  update: OrgUnitUpdateDataInput;
  create: OrgUnitCreateInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CodeValueCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  sequenceOrder?: Maybe<Int>;
  codeId: CodeCreateOneWithoutCodeValueIdInput;
}

export interface CodeValueUpsertNestedInput {
  update: CodeValueUpdateDataInput;
  create: CodeValueCreateInput;
}

export interface CodeCreateOneWithoutCodeValueIdInput {
  create?: Maybe<CodeCreateWithoutCodeValueIdInput>;
  connect?: Maybe<CodeWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  isOrgUnitPrimaryContact?: Maybe<Boolean>;
}

export interface CodeCreateWithoutCodeValueIdInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ContactDetailScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContactDetailScalarWhereInput[] | ContactDetailScalarWhereInput>;
  OR?: Maybe<ContactDetailScalarWhereInput[] | ContactDetailScalarWhereInput>;
  NOT?: Maybe<ContactDetailScalarWhereInput[] | ContactDetailScalarWhereInput>;
}

export interface CodeValueUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  sequenceOrder?: Maybe<Int>;
  codeId?: Maybe<CodeUpdateOneRequiredWithoutCodeValueIdInput>;
}

export interface ContactDetailUpdateWithWhereUniqueWithoutUserInput {
  where: ContactDetailWhereUniqueInput;
  data: ContactDetailUpdateWithoutUserDataInput;
}

export interface CodeUpdateOneRequiredWithoutCodeValueIdInput {
  create?: Maybe<CodeCreateWithoutCodeValueIdInput>;
  update?: Maybe<CodeUpdateWithoutCodeValueIdDataInput>;
  upsert?: Maybe<CodeUpsertWithoutCodeValueIdInput>;
  connect?: Maybe<CodeWhereUniqueInput>;
}

export interface OrgUnitWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  registeredName?: Maybe<String>;
  registeredName_not?: Maybe<String>;
  registeredName_in?: Maybe<String[] | String>;
  registeredName_not_in?: Maybe<String[] | String>;
  registeredName_lt?: Maybe<String>;
  registeredName_lte?: Maybe<String>;
  registeredName_gt?: Maybe<String>;
  registeredName_gte?: Maybe<String>;
  registeredName_contains?: Maybe<String>;
  registeredName_not_contains?: Maybe<String>;
  registeredName_starts_with?: Maybe<String>;
  registeredName_not_starts_with?: Maybe<String>;
  registeredName_ends_with?: Maybe<String>;
  registeredName_not_ends_with?: Maybe<String>;
  displayName?: Maybe<String>;
  displayName_not?: Maybe<String>;
  displayName_in?: Maybe<String[] | String>;
  displayName_not_in?: Maybe<String[] | String>;
  displayName_lt?: Maybe<String>;
  displayName_lte?: Maybe<String>;
  displayName_gt?: Maybe<String>;
  displayName_gte?: Maybe<String>;
  displayName_contains?: Maybe<String>;
  displayName_not_contains?: Maybe<String>;
  displayName_starts_with?: Maybe<String>;
  displayName_not_starts_with?: Maybe<String>;
  displayName_ends_with?: Maybe<String>;
  displayName_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrgUnitWhereInput[] | OrgUnitWhereInput>;
  OR?: Maybe<OrgUnitWhereInput[] | OrgUnitWhereInput>;
  NOT?: Maybe<OrgUnitWhereInput[] | OrgUnitWhereInput>;
}

export interface CodeUpdateWithoutCodeValueIdDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ContactDetailCreateManyWithoutUserInput {
  create?: Maybe<
    ContactDetailCreateWithoutUserInput[] | ContactDetailCreateWithoutUserInput
  >;
  connect?: Maybe<
    ContactDetailWhereUniqueInput[] | ContactDetailWhereUniqueInput
  >;
}

export interface CodeUpsertWithoutCodeValueIdInput {
  update: CodeUpdateWithoutCodeValueIdDataInput;
  create: CodeCreateWithoutCodeValueIdInput;
}

export interface PostUpdateManyMutationInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface CodeValueUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  sequenceOrder?: Maybe<Int>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface ContactDetailCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutContactIdInput;
  detailTypeId: CodeValueCreateOneInput;
  value: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserCreateOneWithoutContactIdInput {
  create?: Maybe<UserCreateWithoutContactIdInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ContactDetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContactDetailWhereInput>;
  AND?: Maybe<
    ContactDetailSubscriptionWhereInput[] | ContactDetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    ContactDetailSubscriptionWhereInput[] | ContactDetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ContactDetailSubscriptionWhereInput[] | ContactDetailSubscriptionWhereInput
  >;
}

export interface UserCreateWithoutContactIdInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  orgUnitId: OrgUnitCreateOneInput;
  isOrgUnitPrimaryContact?: Maybe<Boolean>;
}

export type ContactDetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrgUnitCreateOneInput {
  create?: Maybe<OrgUnitCreateInput>;
  connect?: Maybe<OrgUnitWhereUniqueInput>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  orgUnitId?: Maybe<OrgUnitUpdateOneRequiredInput>;
  contactId?: Maybe<ContactDetailUpdateManyWithoutUserInput>;
  isOrgUnitPrimaryContact?: Maybe<Boolean>;
}

export interface OrgUnitCreateInput {
  id?: Maybe<ID_Input>;
  registeredName: String;
  displayName: String;
  address: String;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CodeValueCreateOneInput {
  create?: Maybe<CodeValueCreateInput>;
  connect?: Maybe<CodeValueWhereUniqueInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface OrgUnitUpdateOneRequiredInput {
  create?: Maybe<OrgUnitCreateInput>;
  update?: Maybe<OrgUnitUpdateDataInput>;
  upsert?: Maybe<OrgUnitUpsertNestedInput>;
  connect?: Maybe<OrgUnitWhereUniqueInput>;
}

export interface UserUpdateWithoutContactIdDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  orgUnitId?: Maybe<OrgUnitUpdateOneRequiredInput>;
  isOrgUnitPrimaryContact?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutContactIdInput {
  create?: Maybe<UserCreateWithoutContactIdInput>;
  update?: Maybe<UserUpdateWithoutContactIdDataInput>;
  upsert?: Maybe<UserUpsertWithoutContactIdInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ContactDetailUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutContactIdInput>;
  detailTypeId?: Maybe<CodeValueUpdateOneRequiredInput>;
  value?: Maybe<String>;
}

export type CodeValueWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrgUnitUpdateManyMutationInput {
  registeredName?: Maybe<String>;
  displayName?: Maybe<String>;
  address?: Maybe<String>;
}

export interface OrgUnitSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrgUnitWhereInput>;
  AND?: Maybe<OrgUnitSubscriptionWhereInput[] | OrgUnitSubscriptionWhereInput>;
  OR?: Maybe<OrgUnitSubscriptionWhereInput[] | OrgUnitSubscriptionWhereInput>;
  NOT?: Maybe<OrgUnitSubscriptionWhereInput[] | OrgUnitSubscriptionWhereInput>;
}

export interface ContactDetailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  detailTypeId?: Maybe<CodeValueWhereInput>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContactDetailWhereInput[] | ContactDetailWhereInput>;
  OR?: Maybe<ContactDetailWhereInput[] | ContactDetailWhereInput>;
  NOT?: Maybe<ContactDetailWhereInput[] | ContactDetailWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  isOrgUnitPrimaryContact?: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isOrgUnitPrimaryContact: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  isOrgUnitPrimaryContact: () => Promise<AsyncIterator<Boolean>>;
}

export interface CodeValueEdge {
  node: CodeValue;
  cursor: String;
}

export interface CodeValueEdgePromise
  extends Promise<CodeValueEdge>,
    Fragmentable {
  node: <T = CodeValuePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CodeValueEdgeSubscription
  extends Promise<AsyncIterator<CodeValueEdge>>,
    Fragmentable {
  node: <T = CodeValueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface CodeValueConnection {
  pageInfo: PageInfo;
  edges: CodeValueEdge[];
}

export interface CodeValueConnectionPromise
  extends Promise<CodeValueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CodeValueEdge>>() => T;
  aggregate: <T = AggregateCodeValuePromise>() => T;
}

export interface CodeValueConnectionSubscription
  extends Promise<AsyncIterator<CodeValueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CodeValueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCodeValueSubscription>() => T;
}

export interface AggregateCode {
  count: Int;
}

export interface AggregateCodePromise
  extends Promise<AggregateCode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCodeSubscription
  extends Promise<AsyncIterator<AggregateCode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CodeEdge {
  node: Code;
  cursor: String;
}

export interface CodeEdgePromise extends Promise<CodeEdge>, Fragmentable {
  node: <T = CodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CodeEdgeSubscription
  extends Promise<AsyncIterator<CodeEdge>>,
    Fragmentable {
  node: <T = CodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrgUnit {
  count: Int;
}

export interface AggregateOrgUnitPromise
  extends Promise<AggregateOrgUnit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrgUnitSubscription
  extends Promise<AsyncIterator<AggregateOrgUnit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CodeSubscriptionPayload {
  mutation: MutationType;
  node: Code;
  updatedFields: String[];
  previousValues: CodePreviousValues;
}

export interface CodeSubscriptionPayloadPromise
  extends Promise<CodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CodePreviousValuesPromise>() => T;
}

export interface CodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CodePreviousValuesSubscription>() => T;
}

export interface OrgUnitConnection {
  pageInfo: PageInfo;
  edges: OrgUnitEdge[];
}

export interface OrgUnitConnectionPromise
  extends Promise<OrgUnitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrgUnitEdge>>() => T;
  aggregate: <T = AggregateOrgUnitPromise>() => T;
}

export interface OrgUnitConnectionSubscription
  extends Promise<AsyncIterator<OrgUnitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrgUnitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrgUnitSubscription>() => T;
}

export interface CodePreviousValues {
  id: ID_Output;
  name?: String;
  description?: String;
}

export interface CodePreviousValuesPromise
  extends Promise<CodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface CodePreviousValuesSubscription
  extends Promise<AsyncIterator<CodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface ContactDetailEdge {
  node: ContactDetail;
  cursor: String;
}

export interface ContactDetailEdgePromise
  extends Promise<ContactDetailEdge>,
    Fragmentable {
  node: <T = ContactDetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContactDetailEdgeSubscription
  extends Promise<AsyncIterator<ContactDetailEdge>>,
    Fragmentable {
  node: <T = ContactDetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CodeConnection {
  pageInfo: PageInfo;
  edges: CodeEdge[];
}

export interface CodeConnectionPromise
  extends Promise<CodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CodeEdge>>() => T;
  aggregate: <T = AggregateCodePromise>() => T;
}

export interface CodeConnectionSubscription
  extends Promise<AsyncIterator<CodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCodeSubscription>() => T;
}

export interface OrgUnit {
  id: ID_Output;
  registeredName: String;
  displayName: String;
  address: String;
}

export interface OrgUnitPromise extends Promise<OrgUnit>, Fragmentable {
  id: () => Promise<ID_Output>;
  registeredName: () => Promise<String>;
  displayName: () => Promise<String>;
  address: () => Promise<String>;
}

export interface OrgUnitSubscription
  extends Promise<AsyncIterator<OrgUnit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  registeredName: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface OrgUnitNullablePromise
  extends Promise<OrgUnit | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  registeredName: () => Promise<String>;
  displayName: () => Promise<String>;
  address: () => Promise<String>;
}

export interface CodeValueSubscriptionPayload {
  mutation: MutationType;
  node: CodeValue;
  updatedFields: String[];
  previousValues: CodeValuePreviousValues;
}

export interface CodeValueSubscriptionPayloadPromise
  extends Promise<CodeValueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CodeValuePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CodeValuePreviousValuesPromise>() => T;
}

export interface CodeValueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CodeValueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CodeValueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CodeValuePreviousValuesSubscription>() => T;
}

export interface ContactDetail {
  id: ID_Output;
  value: String;
}

export interface ContactDetailPromise
  extends Promise<ContactDetail>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  detailTypeId: <T = CodeValuePromise>() => T;
  value: () => Promise<String>;
}

export interface ContactDetailSubscription
  extends Promise<AsyncIterator<ContactDetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  detailTypeId: <T = CodeValueSubscription>() => T;
  value: () => Promise<AsyncIterator<String>>;
}

export interface ContactDetailNullablePromise
  extends Promise<ContactDetail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  detailTypeId: <T = CodeValuePromise>() => T;
  value: () => Promise<String>;
}

export interface CodeValuePreviousValues {
  id: ID_Output;
  name?: String;
  description?: String;
  sequenceOrder?: Int;
}

export interface CodeValuePreviousValuesPromise
  extends Promise<CodeValuePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  sequenceOrder: () => Promise<Int>;
}

export interface CodeValuePreviousValuesSubscription
  extends Promise<AsyncIterator<CodeValuePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sequenceOrder: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CodeValue {
  id: ID_Output;
  name?: String;
  description?: String;
  sequenceOrder?: Int;
}

export interface CodeValuePromise extends Promise<CodeValue>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  sequenceOrder: () => Promise<Int>;
  codeId: <T = CodePromise>() => T;
}

export interface CodeValueSubscription
  extends Promise<AsyncIterator<CodeValue>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sequenceOrder: () => Promise<AsyncIterator<Int>>;
  codeId: <T = CodeSubscription>() => T;
}

export interface CodeValueNullablePromise
  extends Promise<CodeValue | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  sequenceOrder: () => Promise<Int>;
  codeId: <T = CodePromise>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactDetailSubscriptionPayload {
  mutation: MutationType;
  node: ContactDetail;
  updatedFields: String[];
  previousValues: ContactDetailPreviousValues;
}

export interface ContactDetailSubscriptionPayloadPromise
  extends Promise<ContactDetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContactDetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContactDetailPreviousValuesPromise>() => T;
}

export interface ContactDetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContactDetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContactDetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContactDetailPreviousValuesSubscription>() => T;
}

export interface OrgUnitEdge {
  node: OrgUnit;
  cursor: String;
}

export interface OrgUnitEdgePromise extends Promise<OrgUnitEdge>, Fragmentable {
  node: <T = OrgUnitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrgUnitEdgeSubscription
  extends Promise<AsyncIterator<OrgUnitEdge>>,
    Fragmentable {
  node: <T = OrgUnitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactDetailPreviousValues {
  id: ID_Output;
  value: String;
}

export interface ContactDetailPreviousValuesPromise
  extends Promise<ContactDetailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
}

export interface ContactDetailPreviousValuesSubscription
  extends Promise<AsyncIterator<ContactDetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface ContactDetailConnection {
  pageInfo: PageInfo;
  edges: ContactDetailEdge[];
}

export interface ContactDetailConnectionPromise
  extends Promise<ContactDetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContactDetailEdge>>() => T;
  aggregate: <T = AggregateContactDetailPromise>() => T;
}

export interface ContactDetailConnectionSubscription
  extends Promise<AsyncIterator<ContactDetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContactDetailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContactDetailSubscription>() => T;
}

export interface AggregateCodeValue {
  count: Int;
}

export interface AggregateCodeValuePromise
  extends Promise<AggregateCodeValue>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCodeValueSubscription
  extends Promise<AsyncIterator<AggregateCodeValue>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Code {
  id: ID_Output;
  name?: String;
  description?: String;
}

export interface CodePromise extends Promise<Code>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  codeValueId: <T = FragmentableArray<CodeValue>>(args?: {
    where?: CodeValueWhereInput;
    orderBy?: CodeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CodeSubscription
  extends Promise<AsyncIterator<Code>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  codeValueId: <T = Promise<AsyncIterator<CodeValueSubscription>>>(args?: {
    where?: CodeValueWhereInput;
    orderBy?: CodeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CodeNullablePromise
  extends Promise<Code | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  codeValueId: <T = FragmentableArray<CodeValue>>(args?: {
    where?: CodeValueWhereInput;
    orderBy?: CodeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrgUnitPreviousValues {
  id: ID_Output;
  registeredName: String;
  displayName: String;
  address: String;
}

export interface OrgUnitPreviousValuesPromise
  extends Promise<OrgUnitPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  registeredName: () => Promise<String>;
  displayName: () => Promise<String>;
  address: () => Promise<String>;
}

export interface OrgUnitPreviousValuesSubscription
  extends Promise<AsyncIterator<OrgUnitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  registeredName: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface OrgUnitSubscriptionPayload {
  mutation: MutationType;
  node: OrgUnit;
  updatedFields: String[];
  previousValues: OrgUnitPreviousValues;
}

export interface OrgUnitSubscriptionPayloadPromise
  extends Promise<OrgUnitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrgUnitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrgUnitPreviousValuesPromise>() => T;
}

export interface OrgUnitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrgUnitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrgUnitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrgUnitPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  isOrgUnitPrimaryContact?: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  orgUnitId: <T = OrgUnitPromise>() => T;
  contactId: <T = FragmentableArray<ContactDetail>>(args?: {
    where?: ContactDetailWhereInput;
    orderBy?: ContactDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isOrgUnitPrimaryContact: () => Promise<Boolean>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  orgUnitId: <T = OrgUnitSubscription>() => T;
  contactId: <T = Promise<AsyncIterator<ContactDetailSubscription>>>(args?: {
    where?: ContactDetailWhereInput;
    orderBy?: ContactDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isOrgUnitPrimaryContact: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  orgUnitId: <T = OrgUnitPromise>() => T;
  contactId: <T = FragmentableArray<ContactDetail>>(args?: {
    where?: ContactDetailWhereInput;
    orderBy?: ContactDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isOrgUnitPrimaryContact: () => Promise<Boolean>;
}

export interface AggregateContactDetail {
  count: Int;
}

export interface AggregateContactDetailPromise
  extends Promise<AggregateContactDetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContactDetailSubscription
  extends Promise<AsyncIterator<AggregateContactDetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Code",
    embedded: false
  },
  {
    name: "CodeValue",
    embedded: false
  },
  {
    name: "OrgUnit",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "ContactDetail",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
